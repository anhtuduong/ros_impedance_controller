<?xml version="1.0" ?>
<launch>
	<arg name="robot_name" default="hyq" />
        <arg name="only_torque" default="false" />
        <arg name="rviz" default="true" />
        <arg name="gui" default="false" />
        <arg name="rviz_conf" default="$(find ros_impedance_controller)/config/operator.rviz"/>


	<arg name="task_period" default="0.004" />
	<arg name="new_gazebo_version" default="false" />

        <!-- load robot name into param server-->
        <param name="robot_name" type="str" value="$(arg robot_name)" />

        <!-- 1 launch gzserver (with empty world)/ gzcclient -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch" >
                <arg name="paused" default="false" />
                <arg name="use_sim_time" default="true" />
                <arg name="gui" value="$(arg gui)" />
                <arg name="headless" default="false" />
                <arg name="debug" default="false" />
                <arg name="verbose" value="true" />
        </include>

        <!-- 2 - load the robot URDF into param server (this will have to contain ros_control plugin and transmissions) -->
         <!-- to set the task_period  you need to regenerate the urdf from hyq description by changing <updateRate> of plugin libgazebo_ros_p3d.so-->
         <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find hyq_description)/robots/hyq.urdf.xacro'
         new_gazebo_version:=$(arg new_gazebo_version)  task_period:=$(arg task_period)"/>


        <!-- 3 Spawn a robot into Gazebo -->
        <node name="spawn_hyq_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model hyq -z 1.0"/>

        <!-- 4 -Loading  controller configurations from YAML file to parameter server -->
        <rosparam file="$(find ros_impedance_controller)/config/joint_state_publisher.yaml" ns="/$(arg robot_name)" command="load"/>

        <!-- Loading ros_impedance_controller config -->
        <group if="$(arg only_torque)">
           <rosparam file="$(find ros_impedance_controller)/config/ros_impedance_controller_only_torques.yaml" ns="/$(arg robot_name)" command="load"/>
        </group>
        <group unless="$(arg only_torque)">
           <rosparam file="$(find ros_impedance_controller)/config/ros_impedance_controller_pd.yaml" ns="/$(arg robot_name)" command="load"/>
        </group>

         <!-- 5  - Loading the controllers (joint state publisher (install ros-kinetic-joint-state-controller) is necessary for robot_state publisher to compute the TFs) -->
        <node name="ros_impedance_controller" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="/$(arg robot_name)" args="joint_state_publisher ros_impedance_controller"/>

        <!--  rviz stuff -->
        <!-- 6- load robot_state_publisher: converts joint states to TF transforms, it is just for rviz, etc -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
		<remap from="/joint_states" to="/$(arg robot_name)/joint_states"/> 
	</node>
        <!-- 7 run rviz -->
        <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_conf) -f world" if="$(arg rviz)"/>
</launch>

